---
- name: Create repo file
  file: path=/etc/apt/sources.list.d/pgdg.list state=touch

- name: Add repo url
  lineinfile: dest=/etc/apt/sources.list.d/pgdg.list line="deb http://apt.postgresql.org/pub/repos/apt/ {{ distro }}-pgdg main"

- name: Add key
  apt_key: url=https://www.postgresql.org/media/keys/ACCC4CF8.asc state=present

- name: Install dependencies and package
  apt: name={{ item }} state=latest update_cache=yes
  with_items:
    - postgresql-9.6
    - python-psycopg2
    - postgresql-9.6-postgis-2.3
    - ptop
    - pgtop

# Tuning
- name: Set track_counts=on
  lineinfile: dest=/etc/postgresql/9.6/main/postgresql.conf
              regexp='^track_counts = on'
              insertafter='^#track_counts = on'
              line='track_counts = on'
              state=present

- name: Set autovacuum=on
  lineinfile: dest=/etc/postgresql/9.6/main/postgresql.conf
              regexp='^autovacuum = on'
              insertafter='^autovacuum = on'
              line='autovacuum = on'
              state=present

- name: Set max_connections
  lineinfile: dest=/etc/postgresql/9.6/main/postgresql.conf
              regexp='^max_connections = 12'
              insertafter='^max_connections = 100'
              line='max_connections = 12'
              state=present

- name: Copying management scripts
  copy: "src={{ item.src }} dest={{ item.dest }} mode=755"
  with_items:
    - { src: 'backup', dest: '/usr/local/bin/backup' }
    - { src: 'pg512', dest: '/usr/local/bin/pg512' }
    - { src: 'pg1024', dest: '/usr/local/bin/pg1024' }

- name: Tune for 1024Mb RAM. effective_cache_size
  lineinfile: dest=/etc/postgresql/9.6/main/postgresql.conf
              regexp='^effective_cache_size = 4GB'
              insertafter='^#effective_cache_size = 4GB'
              line='effective_cache_size = 512MB'
              state=present
  when: ansible_memtotal_mb|int > 1023
    
- name: Tune for 512Mb RAM. effective_cache_size
  lineinfile: dest=/etc/postgresql/9.6/main/postgresql.conf
              regexp='^effective_cache_size = 4GB'
              insertafter='^#effective_cache_size = 4GB'
              line='effective_cache_size = 256MB'
              state=present
  when: ansible_memtotal_mb|int < 1023

- name: Tune for 1024Mb RAM. shared_buffers
  lineinfile: dest=/etc/postgresql/9.6/main/postgresql.conf
              regexp='^shared_buffers = 128MB'
              insertafter='^shared_buffers = 128MB'
              line='shared_buffers = 256MB'
              state=present
  when: ansible_memtotal_mb|int > 1023
    
#- name: Tune for 512Mb RAM. shared_buffers
#  lineinfile: dest=/etc/postgresql/9.6/main/postgresql.conf
#              regexp='^shared_buffers = 128MB'
#              insertafter='^#shared_buffers = 128MB'
#              line='shared_buffers = 128MB'
#              state=present
#  when: ansible_memtotal_mb|int < 1023

- name: Tune for 1024Mb RAM. work_mem
  lineinfile: dest=/etc/postgresql/9.6/main/postgresql.conf
              regexp='^work_mem = 4MB'
              insertafter='^#work_mem = 4MB'
              line='work_mem = 8MB'
              state=present
  when: ansible_memtotal_mb|int > 1023
    
- name: Tune for 512Mb RAM. work_mem
  lineinfile: dest=/etc/postgresql/9.6/main/postgresql.conf
              regexp='^work_mem = 4MB'
              insertafter='^#work_mem = 4MB'
              line='work_mem = 4MB'
              state=present
  when: ansible_memtotal_mb|int < 1023

# Password
- name: Transfer pgpass.sql
  template: src=pgpass.sql dest=/tmp/pgpass.sql

- name: Update PostgreSQL password
  command: su -c - postgres "psql -q -d template1 -f /tmp/pgpass.sql"

- name: Remove pgpass.sql
  file: path=/tmp/pgpass.sql state=absent

# Create Database
- name: Create DB
  command: su -c - postgres "createdb -O sahana -E UTF8 -l en_US.UTF-8 sahana -T template0"
  when: type == 'prod'

- name: Create DB
  command: su -c - postgres "createdb -O sahana -E UTF8 -l en_US.UTF-8 sahana-demo -T template0"
  when: type == 'demo'
  tags:
   - demo

- name: Create DB
  command: su -c - postgres "createdb -O sahana -E UTF8 -l en_US.UTF-8 sahana-test -T template0"
  when: type == 'test'
  tags:
   - test

- name: PostGIS DB Config
  command: "{{ item }}"
  with_items:
    - su -c - postgres "psql -q -d sahana -c 'CREATE EXTENSION postgis;'"
    - su -c - postgres "psql -q -d sahana -c 'grant all on geometry_columns to sahana;'"
    - su -c - postgres "psql -q -d sahana -c 'grant all on spatial_ref_sys to sahana;'"
  when: type == 'prod'

- name: PostGIS DB Config
  command: "{{ item }}"
  with_items:
    - su -c - postgres "psql -q -d sahana-{{ type }} CREATE EXTENSION postgis;'"
    - su -c - postgres "psql -q -d sahana-{{ type }} -c 'grant all on geometry_columns to sahana;'"
    - su -c - postgres "psql -q -d sahana-{{ type }} -c 'grant all on spatial_ref_sys to sahana;'"
  when: type != 'prod'
  tags:
    - demo
    - test

#- name: Listen externally
#  lineinfile: dest=/etc/postgresql/9.6/main/postgresql.conf
#              regexp="#listen_addresses = \'localhost\'"
#              backrefs=yes
#              line="listen_addresses = '*'"
#              state=present

#- name: Allow external connections
#  lineinfile: dest=/etc/postgresql/9.6/main/pg_hba.conf
#              insertafter=EOF
#              line="host all all 0.0.0.0/0 md5"
#              state=present

- name: Restart service
  service: name=postgresql state=restarted
  tags:
    - test
    - demo
